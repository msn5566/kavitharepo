{
  "name": "springboot-snyk-fix",
  "description": "MCP tool: Automated Spring Boot vulnerability fixer with IDE repo auto-detection, snyk test JSON export, Copilot-driven fixes, Maven regression, and PR creation.",
  "commands": {
    "run": {
      "description": "Run Snyk test + Copilot fixes + regression + PR workflow",
      "parameters": {
        "repo_path": { "type": "string", "description": "Local repo path (leave empty for IDE auto-detect)" },
        "repo_url": { "type": "string", "description": "Git repo URL (used only if repo_path not provided)" },
        "base_branch": "string",
        "new_branch": "string",
        "pr_title": "string",
        "pr_body": "string",
        "mode": { "type": "string", "description": "Modes: all, clone_build, snyk_test, snyk_fix, rebuild, pr" },
        "retry_count": { "type": "integer", "default": 3, "description": "Retries for PR creation" }
      },
      "run": [
        "IFS=',' read -ra MODES <<< \"{{mode}}\"",
        "MAX_RETRIES={{retry_count}}",
        "RETRY_DELAY=5",
        "",
        "# Auto-detect repo path if not provided",
        "if [ -z '{{repo_path}}' ]; then",
        "  REPO_DIR=$(pwd)",
        "  echo \"‚ÑπÔ∏è Using IDE/project directory: $REPO_DIR\"",
        "else",
        "  REPO_DIR={{repo_path}}",
        "fi",
        "",
        "cd $REPO_DIR || { echo '‚ùå Cannot access repo'; exit 1; }",
        "git checkout {{base_branch}} || { echo '‚ùå Checkout failed'; exit 1; }",
        "",
        "for M in \"${MODES[@]}\"; do",
        "  case $M in",
        "",
        "    clone_build)",
        "      echo 'üîπ Running mvn clean install before tests...'",
        "      mvn clean install -DskipTests || { echo '‚ùå Build failed'; exit 1; }",
        "      ;;",
        "",
        "    snyk_test)",
        "      echo 'üîπ Running Snyk test and exporting JSON...'",
        "      snyk test --json > snyk-report.json || { echo '‚ùå Snyk test failed'; exit 1; }",
        "      ;;",
        "",
        "    snyk_fix)",
        "      echo 'üîπ Pre-build before fix...'",
        "      mvn clean install -DskipTests || { echo '‚ùå Pre-fix build failed'; exit 1; }",
        "",
        "      echo 'üîπ Running Snyk test (JSON export)'",
        "      snyk test --json > snyk-report.json || { echo '‚ùå Snyk test failed'; exit 1; }",
        "",
        "      echo 'üîπ Asking GitHub Copilot to fix based on snyk-report.json'",
        "      ghcp mcp snyk-autofix snyk-report.json || { echo '‚ùå Copilot fix failed'; exit 1; }",
        "",
        "      git add .",
        "      git commit -m \"üîß Copilot auto-fix vulnerabilities from Snyk report\" || echo '‚ö†Ô∏è Nothing to commit'",
        "",
        "      echo 'üîπ Post-build after fix...'",
        "      mvn clean install -DskipTests || { echo '‚ùå Post-fix build failed'; exit 1; }",
        "",
        "      # Regression loop",
        "      for i in 1 2; do",
        "        echo \"üîπ Regression run #$i\"",
        "        snyk test --json > snyk-report.json",
        "        if [ $? -ne 0 ]; then",
        "          echo \"‚ö†Ô∏è Vulnerabilities found in regression #$i. Copilot fixing...\"",
        "          ghcp mcp snyk-autofix snyk-report.json || { echo '‚ùå Copilot fix failed'; exit 1; }",
        "          git add .",
        "          git commit -m \"üîß Regression fix #$i\" || echo '‚ö†Ô∏è Nothing to commit'",
        "          mvn clean install -DskipTests || { echo '‚ùå Build failed after regression fix'; exit 1; }",
        "        else",
        "          echo \"‚úÖ No vulnerabilities in regression #$i\"; break;",
        "        fi",
        "      done",
        "",
        "      echo 'üîπ Final Snyk check after regression'",
        "      snyk test --json > snyk-report.json || echo '‚ö†Ô∏è Vulnerabilities may still exist. Manual review needed.'",
        "      ;;",
        "",
        "    rebuild)",
        "      mvn clean install -DskipTests || { echo '‚ùå Maven rebuild failed'; exit 1; }",
        "      ;;",
        "",
        "    pr)",
        "      attempt=1; success=false",
        "      while [ $attempt -le $MAX_RETRIES ]; do",
        "        git checkout -b {{new_branch}} || git checkout {{new_branch}}",
        "        git add .",
        "        git commit -m '{{pr_title}}' || echo '‚ö†Ô∏è Nothing to commit'",
        "",
        "        echo 'üîπ Merging latest base branch before PR...'",
        "        git fetch origin",
        "        git merge origin/{{base_branch}} --no-commit --no-ff",
        "        if [ $? -ne 0 ]; then echo '‚ùå Merge conflicts. Resolve manually.'; break; fi",
        "        git commit -m 'Merge latest {{base_branch}} before PR' || true",
        "",
        "        git push origin {{new_branch}} && gh pr create --title '{{pr_title}}' --body '{{pr_body}}' --base {{base_branch}} --head {{new_branch}} && success=true && break",
        "",
        "        echo \"‚ö†Ô∏è PR failed. Retrying in $RETRY_DELAY sec...\"; sleep $RETRY_DELAY",
        "        attempt=$((attempt+1))",
        "      done",
        "      if [ \"$success\" = false ]; then echo '‚ùå PR creation failed after retries.'; fi",
        "      ;;",
        "",
        "    all)",
        "      mvn clean install -DskipTests",
        "      snyk test --json > snyk-report.json",
        "      ghcp mcp snyk-autofix snyk-report.json",
        "      git add .; git commit -m 'üîß Copilot fixes';",
        "      mvn clean install -DskipTests",
        "      for i in 1 2; do snyk test --json > snyk-report.json; ghcp mcp snyk-autofix snyk-report.json; mvn clean install -DskipTests; done",
        "      ;;",
        "",
        "    *) echo \"‚ö†Ô∏è Unknown mode $M\" ;;",
        "  esac",
        "done",
        "echo '‚úÖ Workflow completed.'"
      ]
    }
  }
}



/mcp run snyk_fix \
  --mode snyk_fix \
  --repo_path "" \
  --branch "fix/snyk-issues" \
  --base_branch "main"
